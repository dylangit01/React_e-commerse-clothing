{"ast":null,"code":"import firebase from \"firebase/app\";\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCkNKsKe426y2EkqWYbayYmp6dEIvmVsqY\",\n  authDomain: \"e-commerce-project-db-33586.firebaseapp.com\",\n  databaseURL: \"https://e-commerce-project-db-33586.firebaseio.com\",\n  projectId: \"e-commerce-project-db-33586\",\n  storageBucket: \"e-commerce-project-db-33586.appspot.com\",\n  messagingSenderId: \"1078297815133\",\n  appId: \"1:1078297815133:web:e658a29bd68bb4993685b4\",\n  measurementId: \"G-5B4TDM68FV\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalDate) => {\n  if (!userAuth) return;\n  const userRef = await firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // console.log(snapShot)\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...additionalDate\n      });\n    } catch (e) {\n      console.log('error creating error', e.message);\n    }\n  } // no matter what, we need to return this userRef, so that in App.js, we can use userRef.onSnapshot to get the data status\n\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); // console.log(collectionRef)\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); // console.log(newDocRef)\n\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/changrendu/Documents/Andrei_Web_Developer/E-commerce_project/Dylan/e-commerce-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalDate","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createAt","Date","set","e","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst config = {\n    apiKey: \"AIzaSyCkNKsKe426y2EkqWYbayYmp6dEIvmVsqY\",\n    authDomain: \"e-commerce-project-db-33586.firebaseapp.com\",\n    databaseURL: \"https://e-commerce-project-db-33586.firebaseio.com\",\n    projectId: \"e-commerce-project-db-33586\",\n    storageBucket: \"e-commerce-project-db-33586.appspot.com\",\n    messagingSenderId: \"1078297815133\",\n    appId: \"1:1078297815133:web:e658a29bd68bb4993685b4\",\n    measurementId: \"G-5B4TDM68FV\"\n};\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalDate) => {\n    if (!userAuth) return;\n\n    const userRef = await firestore.doc(`users/${userAuth.uid}`);\n    const snapShot = await userRef.get()\n    // console.log(snapShot)\n    if (!snapShot.exists) {\n        const {displayName, email} = userAuth;\n        const createAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createAt,\n                ...additionalDate\n            })\n        } catch (e) {\n            console.log('error creating error', e.message)\n        }\n    }\n    // no matter what, we need to return this userRef, so that in App.js, we can use userRef.onSnapshot to get the data status\n    return userRef\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey)\n    // console.log(collectionRef)\n\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();\n        // console.log(newDocRef)\n       batch.set(newDocRef, obj)\n    });\n\n    return await batch.commit()\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n    const transformedCollection = collections.docs.map(doc => {\n        const {title, items} = doc.data()\n\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items\n        }\n    })\n    console.log(transformedCollection)\n};\n\n\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}