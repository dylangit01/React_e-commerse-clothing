{"ast":null,"code":"import { CartActionTypes } from \"./cart.types\";\nimport { addItemToCart } from \"./cart.utils\";\nconst INITIAL_STATE = {\n  hidden: true,\n  cartItems: []\n};\n\nconst cartReducer = (state = INITIAL_STATE, action = {}) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_ICON:\n      return Object.assign({}, state, {\n        hidden: !state.hidden\n      });\n    // return {\n    //     ...state,\n    //     hidden: !state.hidden\n    // };\n\n    case CartActionTypes.ADD_ITEM:\n      // return Object.assign({}, state, {cartItems: action.payload}) // -> this way is only available for single item change,\n      // if of accumulated item, this way is not working, have to use below way:\n      return { ...state,\n        cartItems: addItemToCart(state.cartItems, action.payload)\n      };\n\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\n      return { ...state,\n        cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id)\n      };\n\n    case CartActionTypes.REMOVE_ITEM:\n      return {};\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/changrendu/Documents/Andrei_Web_Developer/E-commerce_project/Dylan/e-commerce-clothing/src/redux/cart/cart.reducer.js"],"names":["CartActionTypes","addItemToCart","INITIAL_STATE","hidden","cartItems","cartReducer","state","action","type","TOGGLE_CART_ICON","Object","assign","ADD_ITEM","payload","CLEAR_ITEM_FROM_CART","filter","cartItem","id","REMOVE_ITEM"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,cAA9B;AACA,SAAQC,aAAR,QAA4B,cAA5B;AAGA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,IADU;AAElBC,EAAAA,SAAS,EAAE;AAFO,CAAtB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAM,GAAG,EAAjC,KAAwC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,eAAe,CAACS,gBAArB;AAEI,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyB;AAACH,QAAAA,MAAM,EAAE,CAACG,KAAK,CAACH;AAAhB,OAAzB,CAAP;AACJ;AACA;AACA;AACA;;AACA,SAAKH,eAAe,CAACY,QAArB;AACI;AACA;AACA,aAAO,EACH,GAAGN,KADA;AAEHF,QAAAA,SAAS,EAAEH,aAAa,CAACK,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACM,OAAzB;AAFrB,OAAP;;AAIJ,SAAKb,eAAe,CAACc,oBAArB;AACI,aAAO,EACH,GAAGR,KADA;AAEHF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBW,MAAhB,CAAuBC,QAAQ,IACtCA,QAAQ,CAACC,EAAT,KAAgBV,MAAM,CAACM,OAAP,CAAeI,EADxB;AAFR,OAAP;;AAMJ,SAAKjB,eAAe,CAACkB,WAArB;AACI,aAAO,EAAP;;AAGJ;AACI,aAAOZ,KAAP;AA3BR;AA6BH,CA9BD;;AAgCA,eAAeD,WAAf","sourcesContent":["import {CartActionTypes} from \"./cart.types\";\nimport {addItemToCart} from \"./cart.utils\";\n\n\nconst INITIAL_STATE = {\n    hidden: true,\n    cartItems: []\n};\n\nconst cartReducer = (state = INITIAL_STATE, action = {}) => {\n    switch (action.type) {\n        case CartActionTypes.TOGGLE_CART_ICON:\n\n            return Object.assign({}, state, {hidden: !state.hidden});\n        // return {\n        //     ...state,\n        //     hidden: !state.hidden\n        // };\n        case CartActionTypes.ADD_ITEM:\n            // return Object.assign({}, state, {cartItems: action.payload}) // -> this way is only available for single item change,\n            // if of accumulated item, this way is not working, have to use below way:\n            return {\n                ...state,\n                cartItems: addItemToCart(state.cartItems, action.payload)\n            };\n        case CartActionTypes.CLEAR_ITEM_FROM_CART:\n            return {\n                ...state,\n                cartItems: state.cartItems.filter(cartItem =>\n                    cartItem.id !== action.payload.id\n                )\n            };\n        case CartActionTypes.REMOVE_ITEM:\n            return {\n                \n            }\n        default:\n            return state\n    }\n};\n\nexport default cartReducer\n"]},"metadata":{},"sourceType":"module"}